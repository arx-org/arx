version: 1.0.0
groups:
  build:
    targets:
      clean-gcda:
        help: Remove temporary gcda files
        run: |
          touch tmp.gcda
          find . -name "*.gcda" -print0 | xargs -0 rm

      clean:
        help: Remove all unnecessary temporary files
        dependencies:
          - target: build.clean-gcda
        run: |
          rm -rf build/*
          rm -f bin/*
          mkdir -p build

      install:
        help: Install Arx locally
        run: meson install -C build

      release:
        help: Build Arx for release
        env:
          ASAN_OPTIONS: '{{ args.asan_options }}'
        args:
          asan-options:
            help: |
              Define a custom value for the environment variable
              `ASAN_OPTIONS`
            type: string
            default: ''
          build-type:
            help: |
              Define the build type, options are:
              plain, debug, debugoptimized, release, minsize, and custom
            type: string
            default: release
          clean:
            help: Clean temporary files before the building step
            type: bool
            action: store_true
          extras:
            help: Extra arguments for the build step
            type: string
            default: ''
        dependencies:
          - target: build.clean
            if: {{ args.clean }}
        run: |
          meson setup \
            --prefix $CONDA_PREFIX \
            --libdir $CONDA_PREFIX/lib \
            --includedir $CONDA_PREFIX/include \
            --buildtype={{ args.build_type }} \
            --native-file meson.native {{ args.extras }} \
            build .
          meson compile -C build

      dev:
        help: Build for development (+tests +debug)
        args:
          clean:
            help: Clean temporary files before the building step
            type: bool
            action: store_true
        dependencies:
          - target: build.release
            args:
              build-type: "debug"
              extras: "-Ddev=enabled -Db_coverage=true -Doptimization=0"
              clean: {{ args.clean }}
              asan-options: "fast_unwind_on_malloc=0"

  env:
    targets:
      create-file:
        help: Create a .env file
        run: |
          touch .env
          echo -n @("HOST_UID=" + $(id -u) + "HOST_GID=" + $(id -g)) > .env


  conda:
    targets:
      build:
        help: Create the conda package for arx
        run: |
          cd conda/recipe
          conda build purge
          conda mambabuild .


  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p "conventional-changelog-conventionalcommits" \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "@google/semantic-release-replace-plugin" \
        semantic-release

    targets:
      ci:
        help: Run semantic-release on CI
        run: {{ app }} --ci

      dry:
        help: Run semantic-release on CI for tests in dry-run mode.
        run: {{ app }} --dry-run

  docs:
    targets:
      api:
        help: Build API docs
        run: |
          mkdir -p build
          doxygen Doxyfile
          ./scripts/format_releases.sh

      build:
        help: Build the general docs pages
        dependencies:
          - target: docs.clean
          - target: docs.api
        run: |
          mkdocs build --config-file docs/mkdocs.yaml --dirty --site-dir build
          echo "arxlang.org" > ./build/CNAME

      clean:
        help: Clean temporary documentation files
        run: rm -rf ./build

      preview:
        help: Preview documentation result locally
        dependencies:
          - target: docs.clean
          - target: docs.api
        run: mkdocs serve --config-file docs/mkdocs.yaml --watch docs

  tests:
    shell: bash
    targets:
      sanitizer:
        help: Run sanitizer tests
        run: meson test -C build -v

      code-coverage:
        help: Check code coverage by tests
        run: ninja coverage -C build

      gen-object:
        help: Run test for object generation
        args:
          debug:
            help: Debug Mode
            type: bool
            action: store_true
          tests:
            help: Name of the tests to be executed
            type: string
            default: "constant fibonacci sum average print-star"
        shell: bash
        run: |
          set -e

          TMP_DIR=/tmp/arx
          rm -f ${TMP_DIR}/*
          mkdir -p "${TMP_DIR}"

          GDB=""
          DEBUG_FLAGS=""

          if [[ "{{ args.debug  }}" == "True" ]]; then
            GDB="gdb --args"
            DEBUG_FLAGS="-g"
          fi

          TEST_DIR_PATH="./tests"

          # load utils functions
          . "${TEST_DIR_PATH}/scripts/utils.sh"

          ARX="${GDB} ./build/arx"
          MAIN_EXE="${TMP_DIR}/main"

          LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:$LD_LIBRARY_PATH
          export LD_LIBRARY_PATH

          CLANG_EXTRAS="$(llvm-config --cxxflags)"
          CLANG_EXTRAS="${CLANG_EXTRAS} $(llvm-config --ldflags --libs core executionengine interpreter analysis native bitwriter)"
          CLANG_EXTRAS="${CLANG_EXTRAS} $(pkg-config --cflags --libs arrow-glib)"
          CLANG_EXTRAS=$(echo "${CLANG_EXTRAS}" | sed s/-std=c++14/-std=c++20/g)

          rm --force "${TMP_DIR}/*.o"

          for test_name in {{ args.tests }}; do
            print_header "${test_name}"
            OBJECT_FILE="${TMP_DIR}/${test_name}.o"

            ${ARX} --output "${OBJECT_FILE}" --input "examples/${test_name}.arx"

            set -x
            clang++ \
              ${CLANG_EXTRAS} \
              ${DEBUG_FLAGS} \
              -fPIC \
              "${TEST_DIR_PATH}/main-objects/${test_name}.cpp" \
              ${OBJECT_FILE} \
              -o "${TMP_DIR}/main"
            set +x

            echo ">>> RUN THE PROGRAM:"
            chmod +x ${MAIN_EXE}
            ${GDB} ${MAIN_EXE}
            break
          done

      gen-ast:
        help: Run test for AST generation
        args:
          debug:
            help: Debug Mode
            type: bool
            action: store_true
        run: |
          set -e

          TMP_DIR=/tmp/arx
          mkdir -p "${TMP_DIR}"

          GDB=""
          if [[ "{{ args.debug  }}" == "True" ]]; then
            GDB="gdb --args"
          fi

          TEST_DIR_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/tests"

          # load utils functions
          . "${TEST_DIR_PATH}/scripts/utils.sh"

          ARX="${GDB} ./build/arx"
          MAIN_EXE="${TMP_DIR}/main"

          for test_name in "constant" "fibonacci" "sum" "average" "print-star"; do
            print_header "${test_name}"
            ${ARX} --show-ast --input "examples/${test_name}.arx"
          done


      gen-llvm-ir:
        help: Run test for LLVM IR
        args:
          debug:
            help: Debug Mode
            type: bool
            action: store_true
        run: |
          TMP_DIR=/tmp/arx
          mkdir -p "${TMP_DIR}"

          GDB=""
          if [[ "{{ args.debug  }}" == "True" ]]; then
            GDB="gdb --args"
          fi

          TEST_DIR_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/tests"

          # load utils functions
          . "${TEST_DIR_PATH}/scripts/utils.sh"

          ARX="${GDB} ./build/arx"
          MAIN_EXE="${TMP_DIR}/main"

          for test_name in "constant" "fibonacci" "sum" "average" "print-star"; do
            print_header "${test_name}"
            ${ARX} --show-llvm-ir --input "examples/${test_name}.arx"
          done

      examples:
        help: Test all code generation for the example arx files
        dependencies:
          - target: tests.gen-object
          - target: tests.gen-ast
          - target: tests.gen-llvm-ir

      all:
        help: Run sanitizer tests and code generation for examples
        dependencies:
          - target: tests.sanitizer
          - target: tests.examples

      lint:
        help: Run linter tools
        run: pre-commit run --all-files --verbose

  debug:
    targets:
      example:
        help: Debug arx via an example file
        args:
          extras:
            help: Extra arguments for the build step
            type: string
            default: ''
          test-name:
            help: Name of the tests that should be executed
            type: string
            default: ''
            required: true
        env:
          LSAN_OPTIONS: "verbosity=1:log_threads=1"
        shell: bash
        run: |
          gdb \
            --args build/arx \
            --input `pwd`/examples/{{ args.test_name }}.arx \
            --output "/tmp/{{ args.test_name }}" {{ args.extras }}
